'use strict';

var GetIntrinsic = require('es-abstract/GetIntrinsic');

var $fromCharCode = GetIntrinsic('%String.fromCharCode%');
var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require('es-abstract/helpers/callBound');
var forEach = require('es-abstract/helpers/forEach');
var isLeadingSurrogate = require('es-abstract/helpers/isLeadingSurrogate');
var isTrailingSurrogate = require('es-abstract/helpers/isTrailingSurrogate');

var $charCodeAt = callBound('String.prototype.charCodeAt');
var $strSplit = callBound('String.prototype.split');

var Type = require('es-abstract/2019/Type');
var UnicodeEscape = require('es-abstract/2019/UnicodeEscape');
var UTF16Encoding = require('es-abstract/2019/UTF16Encoding');

var has = require('has');

// https://ecma-international.org/ecma-262/10.0/#sec-quotejsonstring

var escapes = {
	'\u0008': '\\b',
	'\u0009': '\\t',
	'\u000A': '\\n',
	'\u000C': '\\f',
	'\u000D': '\\r',
	'\u0022': '\\"',
	'\u005c': '\\\\'
};

module.exports = function QuoteJSONString(value) {
	if (Type(value) !== 'String') {
		throw new $TypeError('Assertion failed: `value` must be a String');
	}
	var product = '"';
	if (value) {
		forEach($strSplit(value), function (C) {
			if (has(escapes, C)) {
				product += escapes[C];
			} else {
				var cCharCode = $charCodeAt(C, 0);
				if (cCharCode < 0x20 || isLeadingSurrogate(C) || isTrailingSurrogate(C)) {
					product += UnicodeEscape(C);
				} else {
					product += $fromCharCode(UTF16Encoding(cCharCode));
				}
			}
		});
	}
	product += '"';
	return product;
};
